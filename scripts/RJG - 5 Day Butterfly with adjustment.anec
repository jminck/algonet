<?xml version="1.0" encoding="iso-8859-1" ?>

<AlgoNETExplorer>
    <StrategyCode StrategyName="RJG - 5 Day Butterfly with adjustment" Language="C# .NET">
        <TickEventCode>if (Backtest.UnderlyingSymbol==&quot;SPX&quot;)
{
		Backtest.Configuration.PriceValidation.PositionConfirmationCount=3;
		Backtest.Configuration.PriceValidation.PositionPercChange=5;
}

//
// Copyright THJ Systems Ltd
//
//------- D E S C R I P T I O N -------
//

//------- P E R F O R M A N C E   P A R A M E T E R S -------
Backtest.Configuration.UseWeekly=true;
Backtest.Configuration.UseQuarterly=false;
Backtest.Configuration.MaxExpirationDTE=7; //maake larger than farmonth

//------- O P T I M I Z A T I O N   P A R A M E T E R S -------
int PARAM_NearMonth = 4;  // in ONE, the Fri expiry is 4 days away from Mon
int PARAM_FarMonth = 6;
int PARAM_WingWidth = 40;
int PARAM_NumberOfContracts = 10;
int PARAM_ProfitTarget = 20;
int PARAM_MaxLoss = 30;
int PARAM_ExitDTE = 1;  //max days to expiry - get out how many days before expiry?

var PARAM_DoAdjustments = false;

try {

//------- E N T R Y   R U L E S -------
if(Position.IsOpen==false) {

	 WriteLog(&quot;-- BEGIN PARAMETERS ------------------------------------------&quot;);
	 WriteLog(&quot;PARAM_NearMonth:&quot; + PARAM_NearMonth);
	 WriteLog(&quot;PARAM_FarMonth: &quot; + PARAM_FarMonth);
	 WriteLog(&quot;-- END PARAMETERS ------------------------------------------&quot;);

	
    //Find the weekly expiration cycle
    var monthExpiration=GetExpiryByDTE(PARAM_NearMonth, PARAM_FarMonth);
    if (monthExpiration == null) return;   // Haven&apos;t found an expiration matching our criteria
	
	TimeSpan currentTime=Backtest.TradingDateTime.ToLocalTime().TimeOfDay;		    //Convert from UTC to localtime
    TimeSpan TradeTime = new TimeSpan(9, 30, 0); 							        //10:00 AM
	
	if (Backtest.TradingDateTime.DayOfWeek != DayOfWeek.Monday) return;
	
    if (currentTime == TradeTime) {

	    //Create a new Model Position and build an ATM Call Butterfly using the expiration cycles we found above.
	    var modelPosition=NewModelPosition();
	    modelPosition.AddButterfly(ATM, PARAM_WingWidth, Buy, Call, PARAM_NumberOfContracts, monthExpiration);

	    //Commit the Model Position to the Trade Log and add a comment
	    modelPosition.CommitTrade(&quot;Buy ATM Call Butterfly&quot;);
	}
}


//------- A D J U S T M E N T   R U L E S -------
if(Position.IsOpen==true &amp;&amp; PARAM_DoAdjustments==true) {
	
	int existingHedgeDelta  = 0;
           foreach(Position.IPositionLeg leg in Position.GetAllLegs()) {
				 if(leg.LegName.StartsWith(&quot;FlattenDeltaLeg&quot;)) {
						WriteLog(&quot;evaluating &quot; + leg.LegName);
						var existingHedge=leg;
						existingHedgeDelta = (int) existingHedge.Delta;
					}
			}
	
	
	if (Position.Adjustments  &lt;= 2) {
		int deltaLimit = PARAM_NumberOfContracts * 13;
		int hedgeSize = deltaLimit / 50;
		var monthExpiration=GetExpiryByDTE(Position.GetLegByName(&quot;ShortLeg-*&quot;).DTE);
		var modelPosition=NewModelPosition();
		
		//WriteLog(&quot;existingHedgeDelta=&quot; + existingHedge.Delta);
		if (Position.Delta &lt; -deltaLimit) {
			if (existingHedgeDelta &lt; 0) {
			    var leg = Position.GetLegByName(&quot;FlattenDeltaLeg-*&quot;).CreateClosingModelLeg();
                modelPosition.AddLeg (leg);
                modelPosition.CommitTrade (&quot;Close Put Hedge&quot;);
			} else {
			    //Flatten Deltas by buying a single call option with the closest delta.
			    var leg=CreateModelLeg(Buy, hedgeSize, GetOptionByDelta(Call, 50, monthExpiration),&quot;FlattenDeltaLeg-&quot; + Position.Adjustments);
			    modelPosition.AddLeg(leg);
				modelPosition.CommitTrade(modelPosition.Tag + &quot; Hedge&quot;);
			}
		}

		if (Position.Delta &gt; deltaLimit) {
			if (existingHedgeDelta &gt; 0) {
			    var leg = Position.GetLegByName(&quot;FlattenDeltaLeg-*&quot;).CreateClosingModelLeg();
                modelPosition.AddLeg (leg);
                modelPosition.CommitTrade (&quot;Close Call Hedge&quot;);
			} else {
			    //Flatten Deltas by buying a single call option with the closest delta.
			    var leg=CreateModelLeg(Buy, hedgeSize, GetOptionByDelta(Put, -50, monthExpiration),&quot;FlattenDeltaLeg-&quot; + Position.Adjustments);
			    modelPosition.AddLeg(leg);
				modelPosition.CommitTrade(modelPosition.Tag + &quot; Hedge&quot;);
			}
		}
	}		
}

//------- E X I T   R U L E S -------
if(Position.IsOpen==true) {
	
var shortLeg=Position.GetLegByName(&quot;ShortLeg-*&quot;);
var whichBE=&quot;&quot;;
	if(shortLeg.Strike &gt; Underlying.Last)
	{
		whichBE = &quot;Lower&quot;;
		//get lower BE price 
		if (Position.Expiration().LowerBE &gt; 0)
			{
			Position.Tag = Position.Expiration().LowerBE;
			}
	} else {
		whichBE = &quot;Upper&quot;;
		//get upper BE price 
		if (Position.Expiration().UpperBE &gt; 0)
			{
			Position.Tag = Position.Expiration().UpperBE;
			}
	}
	
//debug: my position breakevens went to zero. why???
WriteLog(&quot;=================== Exit preamble ===================&quot;);
WriteLog(&quot;Underlying.Last: &quot; + Underlying.Last);
WriteLog(&quot;Position.Expiration().UpperBE: &quot; + Position.Expiration().UpperBE);
WriteLog(&quot;Position.Expiration().LowerBE: &quot; + Position.Expiration().LowerBE);
WriteLog(&quot;Position.Tag: &quot; + Position.Tag);
WriteLog(&quot;whichBE: &quot; + whichBE);
WriteLog(&quot;PnLPercentage: &quot; + Position.PnLPercentage);



	//Check Profit Target
    if(Position.PnLPercentage &gt;= PARAM_ProfitTarget) Position.Close(&quot;Hit Profit Target&quot;);

    //Check Max Loss
    if(Position.PnLPercentage &lt;= -PARAM_MaxLoss) Position.Close(&quot;Hit Max Loss&quot;);

    //Check Max Adjustments
    if(Position.Adjustments &gt; 3) Position.Close(&quot;Hit Max Adjustments&quot;);
		
	//Check Minimum DTE
    if(Position.DTE &lt;= PARAM_ExitDTE) Position.Close(&quot;Hit Minimum DTE&quot;);

	//Check if Underlying moved outside of Upper BreakEven limit
	if (whichBE == &quot;Upper&quot;) {
	    if (Underlying.Last &gt;= (double) Position.Tag) {
		    WriteLog(&quot;=================== Upper logic ===================&quot;);
		    WriteLog(&quot;Underlying.Last:&quot; + Underlying.Last);
		    WriteLog(&quot;Position.Expiration().UpperBE: &quot; + Position.Expiration().UpperBE);
			WriteLog(&quot;PnLPercentage: &quot; + Position.PnLPercentage);
			WriteLog(&quot;Position.Tag: &quot; + Position.Tag);
			
			//close if losing more than 10%
		    if(Position.PnLPercentage &lt;= -10) {
				WriteLog(&quot;Outside upper breakeven and P&amp;L &gt; -10%&quot;);
				WriteLog(&quot;PnLPercentage: &quot; + Position.PnLPercentage);
				Position.Close(&quot;Outside upper breakeven and P&amp;L &gt; -10%&quot;);
			} else {
				WriteLog(&quot;Expiration BE Hit - upper side&quot;);
				WriteLog(&quot;PnLPercentage: &quot; + Position.PnLPercentage);
			}
		}
	}

	//Check if Underlying moved outside of Lower BreakEven limit
	if (whichBE == &quot;Lower&quot;) {
		    if (Underlying.Last &lt;= (double) Position.Tag) {

			WriteLog(&quot;=================== Lower logic ===================&quot;);
			WriteLog(&quot;Underlying.Last:&quot; + Underlying.Last);
			WriteLog(&quot;Position.Expiration().LowerBE: &quot; + Position.Expiration().LowerBE);
			WriteLog(&quot;PnLPercentage: &quot; + Position.PnLPercentage);
			WriteLog(&quot;Position.Tag: &quot; + Position.Tag);
				
			//close if losing more than 10%
		    if(Position.PnLPercentage &lt;= -10) {
				WriteLog(&quot;Outside lower breakeven and P&amp;L &gt; -10%&quot;);
				WriteLog(&quot;PnLPercentage: &quot; + Position.PnLPercentage);
				Position.Close(&quot;Outside lower breakeven and P&amp;L &gt; -10%&quot;);
			} else {
				WriteLog(&quot;Expiration BE Hit - lower side&quot;);
				WriteLog(&quot;PnLPercentage: &quot; + Position.PnLPercentage);
			}
		}	
	}
//}
}

} catch (Exception ex) {
 WriteLog(&quot;Try/Catch hit&quot;);
}</TickEventCode>
    </StrategyCode>
</AlgoNETExplorer>
