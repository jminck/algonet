<?xml version="1.0" encoding="iso-8859-1" ?>

<AlgoNETExplorer>
    <StrategyCode StrategyName="BETA_30 Day Calendar roll to ATM" Language="C# .NET">
        <TickEventCode>//
// Copyright THJ Systems Ltd
//
//------- D E S C R I P T I O N -------
//

//------- P E R F O R M A N C E   P A R A M E T E R S -------
Backtest.Configuration.UseWeekly=true;
Backtest.Configuration.UseQuarterly=true;
Backtest.Configuration.MaxExpirationDTE=80;

//------- O P T I M I Z A T I O N   P A R A M E T E R S -------
int PARAM_NearMonth=40;
int PARAM_FarMonth=50;
int PARAM_NumberOfContracts=5;
int PARAM_AdjustUpMoveLimit=90;
int PARAM_AdjustDownMoveLimit=90;
int PARAM_ProfitTarget=10;
int PARAM_MaxLoss=15;
int PARAM_ExitDTE=5;
double PARAM_UnderlyingMovementSDdown=-1;
double PARAM_UnderlyingMovementSDup=1;
int PARAM_UnderlyingMovementSDDays=1;
float PARAM_VolatilitySkew1=-2;
float PARAM_VolatilitySkew2=3;

bool okToTrade = false;

DateTime[] vixUnder12 = new DateTime[]
{
new DateTime(2013, 3, 11), new DateTime(2013, 3, 14), new DateTime(2013, 3, 15), 
new DateTime(2014, 5, 22), new DateTime(2014, 5, 23), new DateTime(2014, 5, 27), new DateTime(2014, 5, 28), new DateTime(2014, 5, 29), new DateTime(2014, 5, 30), new DateTime(2014, 6, 2),
new DateTime(2014, 6, 3), new DateTime(2014, 6, 5), new DateTime(2014, 6, 6), new DateTime(2014, 6, 9), new DateTime(2014, 6, 10), new DateTime(2014, 6, 11), new DateTime(2014, 6, 18),
new DateTime(2014, 6, 19), new DateTime(2014, 6, 20), new DateTime(2014, 6, 23), new DateTime(2014, 6, 24), new DateTime(2014, 6, 25), new DateTime(2014, 6, 27), new DateTime(2014, 6, 30),
new DateTime(2014, 7, 1), new DateTime(2014, 7, 2), new DateTime(2014, 7, 3), new DateTime(2014, 7, 7), new DateTime(2014, 7, 9), new DateTime(2014, 7, 14), new DateTime(2014, 7, 15),
new DateTime(2014, 7, 16), new DateTime(2014, 7, 22), new DateTime(2014, 7, 23), new DateTime(2014, 7, 24), new DateTime(2014, 8, 20), new DateTime(2014, 8, 22), new DateTime(2014, 8, 25),
new DateTime(2014, 8, 26), new DateTime(2014, 8, 27), new DateTime(2014, 12, 5), new DateTime(2015, 7, 17), new DateTime(2015, 8, 5), new DateTime(2016, 7, 20), new DateTime(2016, 8, 5),
new DateTime(2016, 8, 8), new DateTime(2016, 8, 9), new DateTime(2016, 8, 10), new DateTime(2016, 8, 11), new DateTime(2016, 8, 12), new DateTime(2016, 8, 15), new DateTime(2016, 8, 18), 
new DateTime(2016, 8, 19), new DateTime(2016, 12, 6), new DateTime(2016, 12, 7), new DateTime(2016, 12, 20), new DateTime(2016, 12, 21), new DateTime(2016, 12, 22), new DateTime(2016, 12, 23),
new DateTime(2017, 1, 5), new DateTime(2017, 1, 6), new DateTime(2017, 1, 9), new DateTime(2017, 1, 10), new DateTime(2017, 1, 11), new DateTime(2017, 1, 12), new DateTime(2017, 1, 13),
new DateTime(2017, 1, 24), new DateTime(2017, 1, 25), new DateTime(2017, 1, 26), new DateTime(2017, 1, 27), new DateTime(2017, 2, 1), new DateTime(2017, 2, 3), new DateTime(2017, 2, 6),
new DateTime(2017, 2, 7), new DateTime(2017, 2, 8), new DateTime(2017, 2, 9), new DateTime(2017, 2, 10), new DateTime(2017, 2, 13), new DateTime(2017, 2, 14), new DateTime(2017, 2, 15),
new DateTime(2017, 2, 17), new DateTime(2017, 2, 21), new DateTime(2017, 2, 22), new DateTime(2017, 2, 24), new DateTime(2017, 2, 27), new DateTime(2017, 3, 3), new DateTime(2017, 3, 6),
new DateTime(2017, 3, 7), new DateTime(2017, 3, 8), new DateTime(2017, 3, 10), new DateTime(2017, 3, 13), new DateTime(2017, 3, 14), new DateTime(2017, 3, 15), new DateTime(2017, 3, 16),
new DateTime(2017, 3, 17), new DateTime(2017, 3, 20), new DateTime(2017, 3, 21), new DateTime(2017, 3, 29), new DateTime(2017, 3, 30), new DateTime(2017, 4, 5), new DateTime(2017, 4, 24), 
new DateTime(2017, 4, 25), new DateTime(2017, 4, 26), new DateTime(2017, 4, 27), new DateTime(2017, 4, 28), new DateTime(2017, 5, 1), new DateTime(2017, 5, 2), new DateTime(2017, 5, 3),
new DateTime(2017, 5, 4), new DateTime(2017, 5, 5), new DateTime(2017, 5, 8), new DateTime(2017, 5, 11), new DateTime(2017, 5, 12), new DateTime(2017, 5, 15), new DateTime(2017, 5, 16),
new DateTime(2017, 5, 22), new DateTime(2017, 5, 23), new DateTime(2017, 5, 24), new DateTime(2017, 5, 25), new DateTime(2017, 5, 26), new DateTime(2017, 5, 30), new DateTime(2017, 5, 31),
new DateTime(2017, 6, 1), new DateTime(2017, 6, 6), new DateTime(2017, 6, 7), new DateTime(2017, 6, 8), new DateTime(2017, 6, 9), new DateTime(2017, 6, 12), new DateTime(2017, 6, 13),
new DateTime(2017, 6, 14), new DateTime(2017, 6, 15), new DateTime(2017, 6, 16), new DateTime(2017, 6, 19), new DateTime(2017, 6, 20), new DateTime(2017, 6, 21), new DateTime(2017, 6, 22),
new DateTime(2017, 6, 23), new DateTime(2017, 6, 26), new DateTime(2017, 6, 27), new DateTime(2017, 6, 28), new DateTime(2017, 6, 30), new DateTime(2017, 7, 3), new DateTime(2017, 7, 5),
new DateTime(2017, 7, 7), new DateTime(2017, 7, 10), new DateTime(2017, 7, 11), new DateTime(2017, 7, 12), new DateTime(2017, 7, 13), new DateTime(2017, 7, 18), new DateTime(2017, 7, 27),
new DateTime(2017, 7, 28), new DateTime(2017, 7, 31), new DateTime(2017, 8, 1), new DateTime(2017, 8, 2), new DateTime(2017, 8, 3), new DateTime(2017, 8, 4), new DateTime(2017, 8, 7),
new DateTime(2017, 8, 8), new DateTime(2017, 8, 9), new DateTime(2017, 8, 15), new DateTime(2017, 8, 16), new DateTime(2017, 8, 23), new DateTime(2017, 8, 25), new DateTime(2017, 8, 28),
new DateTime(2017, 8, 30), new DateTime(2017, 8, 31), new DateTime(2017, 9, 1), new DateTime(2017, 9, 6), new DateTime(2017, 9, 7), new DateTime(2017, 9, 11), new DateTime(2017, 9, 12),
new DateTime(2017, 9, 13), new DateTime(2017, 9, 14), new DateTime(2017, 9, 15), new DateTime(2017, 9, 18), new DateTime(2017, 9, 19), new DateTime(2017, 9, 20), new DateTime(2017, 9, 25),
new DateTime(2017, 9, 26), new DateTime(2017, 9, 27), new DateTime(2017, 10, 9), new DateTime(2017, 10, 10), new DateTime(2017, 10, 11), new DateTime(2017, 10, 17), new DateTime(2017, 10, 18),
new DateTime(2017, 10, 19), new DateTime(2017, 10, 23), new DateTime(2017, 10, 24), new DateTime(2017, 10, 26), new DateTime(2017, 10, 27), new DateTime(2017, 10, 30), new DateTime(2017, 10, 31),
new DateTime(2017, 11, 1), new DateTime(2017, 11, 2), new DateTime(2017, 11, 9), new DateTime(2017, 11, 10), new DateTime(2017, 11, 13), new DateTime(2017, 11, 16), new DateTime(2017, 11, 17),
new DateTime(2017, 11, 20), new DateTime(2017, 11, 21), new DateTime(2017, 11, 27), new DateTime(2017, 11, 29), new DateTime(2017, 11, 30), new DateTime(2017, 12, 4), new DateTime(2017, 12, 5),
new DateTime(2017, 12, 6), new DateTime(2017, 12, 7)} ;

DateTime[] vixUnder11 = new DateTime[]
{
new DateTime(2014, 6, 19), new DateTime(2014, 6, 20), new DateTime(2014, 7, 2), new DateTime(2014, 7, 3), new DateTime(2017, 1, 25), new DateTime(2017, 1, 26),
new DateTime(2017, 1, 27), new DateTime(2017, 2, 10), new DateTime(2017, 4, 25), new DateTime(2017, 4, 26), new DateTime(2017, 4, 27),new DateTime(2017, 4, 28), 
new DateTime(2017, 5, 1), new DateTime(2017, 5, 2), new DateTime(2017, 5, 3), new DateTime(2017, 5, 4), new DateTime(2017, 5, 5), new DateTime(2017, 5, 8),
new DateTime(2017, 5, 11), new DateTime(2017, 5, 12), new DateTime(2017, 5, 15), new DateTime(2017, 5, 16), new DateTime(2017, 5, 23), new DateTime(2017, 5, 24),
new DateTime(2017, 5, 25), new DateTime(2017, 5, 26), new DateTime(2017, 5, 30), new DateTime(2017, 5, 31), new DateTime(2017, 6, 1), new DateTime(2017, 6, 6),
new DateTime(2017, 6, 7), new DateTime(2017, 6, 8), new DateTime(2017, 6, 9), new DateTime(2017, 6, 13), new DateTime(2017, 6, 14), new DateTime(2017, 6, 16),
new DateTime(2017, 6, 19), new DateTime(2017, 6, 20), new DateTime(2017, 6, 21), new DateTime(2017, 6, 22), new DateTime(2017, 6, 23), new DateTime(2017, 6, 26), 
new DateTime(2017, 6, 27), new DateTime(2017, 6, 28), new DateTime(2017, 7, 3), new DateTime(2017, 7, 12), new DateTime(2017, 7, 13), new DateTime(2017, 7, 18),
new DateTime(2017, 7, 27), new DateTime(2017, 7, 28), new DateTime(2017, 7, 31), new DateTime(2017, 8, 1), new DateTime(2017, 8, 2), new DateTime(2017, 8, 3),
new DateTime(2017, 8, 4), new DateTime(2017, 8, 7), new DateTime(2017, 8, 8), new DateTime(2017, 8, 31), new DateTime(2017, 9, 1), new DateTime(2017, 9, 11),
new DateTime(2017, 9, 12), new DateTime(2017, 9, 13), new DateTime(2017, 9, 14), new DateTime(2017, 9, 15), new DateTime(2017, 9, 18), new DateTime(2017, 9, 19),
new DateTime(2017, 9, 20), new DateTime(2017, 9, 25), new DateTime(2017, 9, 26), new DateTime(2017, 9, 27), new DateTime(2017, 10, 9), new DateTime(2017, 10, 10),
new DateTime(2017, 10, 11), new DateTime(2017, 10, 17), new DateTime(2017, 10, 18), new DateTime(2017, 10, 19), new DateTime(2017, 10, 23), new DateTime(2017, 10, 24),
new DateTime(2017, 10, 27), new DateTime(2017, 10, 30), new DateTime(2017, 10, 31), new DateTime(2017, 11, 1), new DateTime(2017, 11, 2), new DateTime(2017, 11, 9),
new DateTime(2017, 11, 21), new DateTime(2017, 11, 27), new DateTime(2017, 11, 29), new DateTime(2017, 12, 7)} ;


//------- E N T R Y   R U L E S -------
if(Position.IsOpen==false) {

	foreach( DateTime date in vixUnder12)
	{
		if (date.Date == Backtest.TradingDateTime.Date)
		{
			okToTrade = true;
			WriteLog(date.Date +  &quot; IS in list of initiation days&quot;);
		}
	}
	
	if (okToTrade == false) 
	{
		WriteLog(&quot;okToTrade is &quot; + okToTrade.ToString());
		return;
	}
	
    //Check if underlying movement within entry SD limits
    double maxSDup=0.0;
    double maxSDdown=0.0;
    GetMaxSDMovement(PARAM_UnderlyingMovementSDDays, ref maxSDup, ref maxSDdown);
    if (maxSDup &gt; PARAM_UnderlyingMovementSDup) {
		WriteLog(&quot;maxSDup hit&quot;);
		return;         // Max SD on upside exceeded
	}
	
    if (maxSDdown &lt; PARAM_UnderlyingMovementSDdown) {
		WriteLog(&quot;maxSDdown hit&quot;);
		return;     // Max SD on downside exceeded
	}

    //Find the near month expiration cycle
    var nearMonthExpiration=GetExpiryByDTE(PARAM_NearMonth, PARAM_FarMonth);
    if (nearMonthExpiration == null) {
		WriteLog(&quot;nearMonthExpiration not found&quot;);
		return; 		// Haven&apos;t found an expiration matching our criteria
	}

    //Find the far month expiration cycle
    var farMonthExpiration=GetExpiryByDTE(PARAM_NearMonth + 28, PARAM_FarMonth + 28);
    if (farMonthExpiration == null) {
		WriteLog(&quot;farMonthExpiration not found&quot;);
		return;   // Haven&apos;t found an expiration matching our criteria
	}
	
    //Create two new Model Positions and build an ATM Calandar using the expiration cycles we found above.
    //One position using Calls, the other using Puts, so we can compare which is better.
    var modelPositionCall=NewModelPosition();
    modelPositionCall.AddCalendar(ATM, Buy, Call, PARAM_NumberOfContracts, nearMonthExpiration, farMonthExpiration);
    var modelPositionPut=NewModelPosition();
    modelPositionPut.AddCalendar(ATM, Buy, Put, PARAM_NumberOfContracts, nearMonthExpiration, farMonthExpiration);
    var modelPosition=NewModelPosition();
    //Look for the calendar with the smallest cost and store it
    if (modelPositionCall.Cost &lt; modelPositionPut.Cost)
         modelPosition.AddCalendar(ATM, Buy, Call, PARAM_NumberOfContracts, nearMonthExpiration, farMonthExpiration);
    else
         modelPosition.AddCalendar(ATM, Buy, Put, PARAM_NumberOfContracts, nearMonthExpiration, farMonthExpiration);

    //Check if Volatility Skew within entry limits
    double IVSkew=modelPosition.GetLegByName(&quot;FrontMonthATM-0&quot;).IV - modelPosition.GetLegByName(&quot;BackMonthATM-0&quot;).IV;
    if (IVSkew &lt; PARAM_VolatilitySkew1 || IVSkew &gt;  PARAM_VolatilitySkew2)
		{
			WriteLog(&quot;IVSkew limit hit: &quot; + IVSkew);
			return;
		}
		
    //Commit the Model Position to the Trade Log and add a comment
    modelPosition.CommitTrade(&quot;Buy ATM Calendar&quot;);
}

//------- A D J U S T M E N T   R U L E S -------
if(Position.IsOpen==true) {

    //Check if Underlying moved outside of BreakEven limit
    var midBE = (Position.Expiration().LowerBE + Position.Expiration().UpperBE) / 2;
    var targetLower = midBE - ((midBE - Position.Expiration().LowerBE) * PARAM_AdjustDownMoveLimit / 100);
    var targetUpper = midBE + ((Position.Expiration().UpperBE - midBE) * PARAM_AdjustUpMoveLimit / 100);
    if (Underlying.Last &gt;= targetUpper) {
        //Find the farthest calendar away from underlying price and remember its adjustment number so we can reference it
        double diff=0;
        double diffMax=0;
        string legName=null;
        foreach (IPositionLeg leg in Position.GetAllLegs()) {
            diff=leg.Strike - Underlying.Last;
            if (Math.Abs(diff) &gt; diffMax) {
                diffMax=diff;
                legName=leg.LegName;
            }
        }
        if (legName!=null) {
            //Extract the adjustment number
            string adjustmentID=legName.Substring(legName.LastIndexOf(&quot;-&quot;) + 1);

            //Create a new Model Position
            var modelPosition=NewModelPosition();

            //Add a new ATM Calandar using the expiration cycles in calendar we are rolling
            modelPosition.AddCalendar(ATM, Position.GetLegByName(&quot;BackMonthATM-&quot; + adjustmentID).Transaction, Position.GetLegByName(&quot;FrontMonthATM-&quot; + adjustmentID).Type, PARAM_NumberOfContracts, GetExpiryByDTE(Position.GetLegByName(&quot;FrontMonthATM-&quot; + adjustmentID).DTE), GetExpiryByDTE(Position.GetLegByName(&quot;BackMonthATM-&quot; + adjustmentID).DTE));

            //Close both legs of the farthest away calendar
            var leg=Position.GetLegByName(&quot;BackMonthATM-&quot; + adjustmentID).CreateClosingModelLeg();
            modelPosition.AddLeg(leg);
            leg=Position.GetLegByName(&quot;FrontMonthATM-&quot; + adjustmentID).CreateClosingModelLeg();
            modelPosition.AddLeg(leg);

            //Commit the Model Position to the Trade Log and add a comment
            modelPosition.CommitTrade(&quot;Roll ATM Calendar (upside)&quot;);
        }
    }
    if (Underlying.Last &lt;= targetLower) {
        //Find the farthest calendar away from underlying price and remember its adjustment number so we can reference it
        double diff=0;
        double diffMax=0;
        string legName=null;
        foreach (IPositionLeg leg in Position.GetAllLegs()) {
            diff=leg.Strike - Underlying.Last;
            if (Math.Abs(diff) &gt; diffMax) {
                diffMax=diff;
                legName=leg.LegName;
            }
        }
        if (legName!=null) {
            //Extract the adjustment number
            string adjustmentID=legName.Substring(legName.LastIndexOf(&quot;-&quot;) + 1);

            //Create a new Model Position
            var modelPosition=NewModelPosition();

            //Add a new ATM Calandar using the expiration cycles in calendar we are rolling
            modelPosition.AddCalendar(ATM, Position.GetLegByName(&quot;BackMonthATM-&quot; + adjustmentID).Transaction, Position.GetLegByName(&quot;FrontMonthATM-&quot; + adjustmentID).Type, PARAM_NumberOfContracts, GetExpiryByDTE(Position.GetLegByName(&quot;FrontMonthATM-&quot; + adjustmentID).DTE), GetExpiryByDTE(Position.GetLegByName(&quot;BackMonthATM-&quot; + adjustmentID).DTE));

            //Close both legs of the farthest away calendar
            var leg=Position.GetLegByName(&quot;BackMonthATM-&quot; + adjustmentID).CreateClosingModelLeg();
            modelPosition.AddLeg(leg);
            leg=Position.GetLegByName(&quot;FrontMonthATM-&quot; + adjustmentID).CreateClosingModelLeg();
            modelPosition.AddLeg(leg);

            //Commit the Model Position to the Trade Log and add a comment
            modelPosition.CommitTrade(&quot;Roll ATM Calendar (downside)&quot;);
        }
    }

}

//------- E X I T   R U L E S -------
if(Position.IsOpen==true) {

    //Check Profit Target
    if(Position.PnLPercentage &gt;= PARAM_ProfitTarget) Position.Close(&quot;Hit Profit Target&quot;);

    //Check Max Loss
    if(Position.PnLPercentage &lt;= -PARAM_MaxLoss) Position.Close(&quot;Hit Max Loss&quot;);

    //Check Minimum DTE
    if(Position.DTE &lt;= PARAM_ExitDTE) Position.Close(&quot;Hit Minimum DTE&quot;);

    //Check Max Adjustments
    if(Position.Adjustments &gt;= 2) Position.Close(&quot;Hit Max Adjustments&quot;);

}
        </TickEventCode>
    </StrategyCode>
</AlgoNETExplorer>
