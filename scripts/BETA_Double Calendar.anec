<?xml version="1.0" encoding="iso-8859-1" ?>

<AlgoNETExplorer>
    <StrategyCode StrategyName="BETA_Double Calendar" Language="C# .NET">
        <TickEventCode>//
//
//
//------- D E S C R I P T I O N -------
//

//------- P E R F O R M A N C E   P A R A M E T E R S -------
Backtest.Configuration.UseWeekly = true;
Backtest.Configuration.UseQuarterly = true;
Backtest.Configuration.MaxExpirationDTE = 90;
Backtest.Configuration.CommissionRates.OptionPerContract = 1.0;

if(Backtest.UnderlyingSymbol == &quot;SPX&quot;) {
    Backtest.Configuration.PriceValidation.PositionConfirmationCount = 3;
    Backtest.Configuration.PriceValidation.PositionPercChange = 5;
}

//------- O P T I M I Z A T I O N   P A R A M E T E R S -------
int PARAM_FrontMonthMinDTE = 9;
int PARAM_FrontMonthMaxDTE = 11;
int PARAM_BackMonthMaxDTE = 14 + PARAM_FrontMonthMaxDTE;
int PARAM_BackMonthMinDTE = 14 + PARAM_FrontMonthMinDTE;
int PARAM_ProfitTarget = 10;
int PARAM_MaxLoss = 15;
int PARAM_ExitDTE = 3;
int PARAM_MaxAdjustments = 10;

//max underlying IV when initiating a trade
int PARAM_MaxUnderlyingIV = 15;

//roll spreads out at percentage of expiration breakeven
int PARAM_AdjustUpMoveLimit = 90;
int PARAM_AdjustDownMoveLimit = 90;

//width of call and put spreads
//note we well change the width of the call spread to 35 to cut deltas in the entry blocl
//if short deltas &gt; 3 when 50x40
int PARAM_CallDiagonalWidth = 0;
int PARAM_PutDiagonalWidth = 0;

//Where, in relation to current price of underlying, do we center the butterfly
int PARAM_FrontMonthCallDelta = 40;
int PARAM_FrontMonthPutDelta = 25;

//entry rules for market condition
double PARAM_UnderlyingMovementSDdown = -1.5;
double PARAM_UnderlyingMovementSDup = 1.5;
int PARAM_UnderlyingMovementSDDays = 3;

//max margin to use for trade
double PARAM_InitialMargin = 15000;
var PARAM_ScaleMargin = false;

//initiation day of month minimum and maximum
int PARAM_InitiationDayMinimum = 1;
int PARAM_InitiationDayMaximum = 31;

//Start and end window for taking trades
TimeSpan currentTime = Backtest.TradingDateTime.ToLocalTime().TimeOfDay; //Convert from UTC to localtime
TimeSpan startTime = new TimeSpan(8, 45, 0); //9:00 AM
TimeSpan endTime = new TimeSpan(14, 55, 0); //3:00 PM

//scalable margin - add 50% of PnL to size up
//but remove entire negative PnL if PnL is below 0
if(PARAM_ScaleMargin == true) {
    if(Backtest.Tag != null) {
        double addMargin =(double) Backtest.Tag;
        if(addMargin &gt; 0) {
            PARAM_InitialMargin = PARAM_InitialMargin +(addMargin / 2);
        } else {
            PARAM_InitialMargin = PARAM_InitialMargin +(addMargin);
        }
    }
    if(Backtest.TradingDateTime.ToLocalTime().TimeOfDay == startTime) WriteLog(&quot;PARAM_InitialxMargin=&quot; + PARAM_InitialMargin);
}

//work around backtest data problem for a specific date
TimeSpan startTime12202012 = new TimeSpan(12, 0, 0);
TimeSpan startTime10AM = new TimeSpan(10, 0, 0);

//minimum and maximum date of the month to enter a trade on
//year and month don&apos;t matter for us, because we will only use the .Day property
DateTime PARAM_InitiationDayMin = new DateTime(2000, 1, PARAM_InitiationDayMinimum);
DateTime PARAM_InitiationDayMax = new DateTime(2999, 12, PARAM_InitiationDayMaximum);

//log params at the beginning of the run
if(Backtest.TradingDateTime.ToLocalTime().TimeOfDay == startTime) {
    if(Backtest.TradeCount == 1) {
        WriteLog(&quot;-- BEGIN PARAMETERS ------------------------------------------&quot;);
		WriteLog(&quot;PARAM_FrontMonthMinDTE=&quot; + PARAM_FrontMonthMinDTE);
		WriteLog(&quot;PARAM_FrontMonthMaxDTE=&quot; + PARAM_FrontMonthMaxDTE);
		WriteLog(&quot;PARAM_BackMonthMaxDTE=&quot; + PARAM_BackMonthMaxDTE);
		WriteLog(&quot;PARAM_BackMonthMinDTE=&quot; + PARAM_BackMonthMinDTE);
		WriteLog(&quot;PARAM_ProfitTarget=&quot; + PARAM_ProfitTarget);
		WriteLog(&quot;PARAM_MaxLoss=&quot; + PARAM_MaxLoss);
		WriteLog(&quot;PARAM_ExitDTE=&quot; + PARAM_ExitDTE);
		WriteLog(&quot;PARAM_MaxAdjustments=&quot; + PARAM_MaxAdjustments);
		WriteLog(&quot;PARAM_MaxUnderlyingIV&quot; + PARAM_MaxUnderlyingIV);
		WriteLog(&quot;PARAM_AdjustUpMoveLimit=&quot; + PARAM_AdjustUpMoveLimit);
		WriteLog(&quot;PARAM_AdjustDownMoveLimit=&quot;+ PARAM_AdjustDownMoveLimit);
		WriteLog(&quot;PARAM_CallDiagonalWidth=&quot; + PARAM_CallDiagonalWidth);
		WriteLog(&quot;PARAM_PutDiagonalWidth=&quot; + PARAM_PutDiagonalWidth);
		WriteLog(&quot;PARAM_FrontMonthCallDelta=&quot; + PARAM_FrontMonthCallDelta);
		WriteLog(&quot;PARAM_FrontMonthPutDelta=&quot; + PARAM_FrontMonthPutDelta);
        WriteLog(&quot;PARAM_ProfitTarget: &quot; + PARAM_ProfitTarget);
        WriteLog(&quot;PARAM_MaxLoss: &quot; + PARAM_MaxLoss);
        WriteLog(&quot;PARAM_MaxUnderlyingIV: &quot; + PARAM_MaxUnderlyingIV);
        WriteLog(&quot;PARAM_UnderlyingMovementSDdown: &quot; + PARAM_UnderlyingMovementSDdown);
        WriteLog(&quot;PARAM_UnderlyingMovementSDup: &quot; + PARAM_UnderlyingMovementSDup);
        WriteLog(&quot;PARAM_UnderlyingMovementSDDays: &quot; + PARAM_UnderlyingMovementSDDays);
        WriteLog(&quot;PARAM_UnderlyingMovementSDDays: &quot; + PARAM_UnderlyingMovementSDDays);
        WriteLog(&quot;startTime: &quot; + startTime + &quot; endTime: &quot; + endTime);
        WriteLog(&quot;-- END PARAMETERS ------------------------------------------&quot;);
    }
}


DateTime[] vixUnder12 = new DateTime[]
{
new DateTime(2013, 3, 11), new DateTime(2013, 3, 14), new DateTime(2013, 3, 15), 
new DateTime(2014, 5, 22), new DateTime(2014, 5, 23), new DateTime(2014, 5, 27), new DateTime(2014, 5, 28), new DateTime(2014, 5, 29), new DateTime(2014, 5, 30), new DateTime(2014, 6, 2),
new DateTime(2014, 6, 3), new DateTime(2014, 6, 5), new DateTime(2014, 6, 6), new DateTime(2014, 6, 9), new DateTime(2014, 6, 10), new DateTime(2014, 6, 11), new DateTime(2014, 6, 18),
new DateTime(2014, 6, 19), new DateTime(2014, 6, 20), new DateTime(2014, 6, 23), new DateTime(2014, 6, 24), new DateTime(2014, 6, 25), new DateTime(2014, 6, 27), new DateTime(2014, 6, 30),
new DateTime(2014, 7, 1), new DateTime(2014, 7, 2), new DateTime(2014, 7, 3), new DateTime(2014, 7, 7), new DateTime(2014, 7, 9), new DateTime(2014, 7, 14), new DateTime(2014, 7, 15),
new DateTime(2014, 7, 16), new DateTime(2014, 7, 22), new DateTime(2014, 7, 23), new DateTime(2014, 7, 24), new DateTime(2014, 8, 20), new DateTime(2014, 8, 22), new DateTime(2014, 8, 25),
new DateTime(2014, 8, 26), new DateTime(2014, 8, 27), new DateTime(2014, 12, 5), new DateTime(2015, 7, 17), new DateTime(2015, 8, 5), new DateTime(2016, 7, 20), new DateTime(2016, 8, 5),
new DateTime(2016, 8, 8), new DateTime(2016, 8, 9), new DateTime(2016, 8, 10), new DateTime(2016, 8, 11), new DateTime(2016, 8, 12), new DateTime(2016, 8, 15), new DateTime(2016, 8, 18), 
new DateTime(2016, 8, 19), new DateTime(2016, 12, 6), new DateTime(2016, 12, 7), new DateTime(2016, 12, 20), new DateTime(2016, 12, 21), new DateTime(2016, 12, 22), new DateTime(2016, 12, 23),
new DateTime(2017, 1, 5), new DateTime(2017, 1, 6), new DateTime(2017, 1, 9), new DateTime(2017, 1, 10), new DateTime(2017, 1, 11), new DateTime(2017, 1, 12), new DateTime(2017, 1, 13),
new DateTime(2017, 1, 24), new DateTime(2017, 1, 25), new DateTime(2017, 1, 26), new DateTime(2017, 1, 27), new DateTime(2017, 2, 1), new DateTime(2017, 2, 3), new DateTime(2017, 2, 6),
new DateTime(2017, 2, 7), new DateTime(2017, 2, 8), new DateTime(2017, 2, 9), new DateTime(2017, 2, 10), new DateTime(2017, 2, 13), new DateTime(2017, 2, 14), new DateTime(2017, 2, 15),
new DateTime(2017, 2, 17), new DateTime(2017, 2, 21), new DateTime(2017, 2, 22), new DateTime(2017, 2, 24), new DateTime(2017, 2, 27), new DateTime(2017, 3, 3), new DateTime(2017, 3, 6),
new DateTime(2017, 3, 7), new DateTime(2017, 3, 8), new DateTime(2017, 3, 10), new DateTime(2017, 3, 13), new DateTime(2017, 3, 14), new DateTime(2017, 3, 15), new DateTime(2017, 3, 16),
new DateTime(2017, 3, 17), new DateTime(2017, 3, 20), new DateTime(2017, 3, 21), new DateTime(2017, 3, 29), new DateTime(2017, 3, 30), new DateTime(2017, 4, 5), new DateTime(2017, 4, 24), 
new DateTime(2017, 4, 25), new DateTime(2017, 4, 26), new DateTime(2017, 4, 27), new DateTime(2017, 4, 28), new DateTime(2017, 5, 1), new DateTime(2017, 5, 2), new DateTime(2017, 5, 3),
new DateTime(2017, 5, 4), new DateTime(2017, 5, 5), new DateTime(2017, 5, 8), new DateTime(2017, 5, 11), new DateTime(2017, 5, 12), new DateTime(2017, 5, 15), new DateTime(2017, 5, 16),
new DateTime(2017, 5, 22), new DateTime(2017, 5, 23), new DateTime(2017, 5, 24), new DateTime(2017, 5, 25), new DateTime(2017, 5, 26), new DateTime(2017, 5, 30), new DateTime(2017, 5, 31),
new DateTime(2017, 6, 1), new DateTime(2017, 6, 6), new DateTime(2017, 6, 7), new DateTime(2017, 6, 8), new DateTime(2017, 6, 9), new DateTime(2017, 6, 12), new DateTime(2017, 6, 13),
new DateTime(2017, 6, 14), new DateTime(2017, 6, 15), new DateTime(2017, 6, 16), new DateTime(2017, 6, 19), new DateTime(2017, 6, 20), new DateTime(2017, 6, 21), new DateTime(2017, 6, 22),
new DateTime(2017, 6, 23), new DateTime(2017, 6, 26), new DateTime(2017, 6, 27), new DateTime(2017, 6, 28), new DateTime(2017, 6, 30), new DateTime(2017, 7, 3), new DateTime(2017, 7, 5),
new DateTime(2017, 7, 7), new DateTime(2017, 7, 10), new DateTime(2017, 7, 11), new DateTime(2017, 7, 12), new DateTime(2017, 7, 13), new DateTime(2017, 7, 18), new DateTime(2017, 7, 27),
new DateTime(2017, 7, 28), new DateTime(2017, 7, 31), new DateTime(2017, 8, 1), new DateTime(2017, 8, 2), new DateTime(2017, 8, 3), new DateTime(2017, 8, 4), new DateTime(2017, 8, 7),
new DateTime(2017, 8, 8), new DateTime(2017, 8, 9), new DateTime(2017, 8, 15), new DateTime(2017, 8, 16), new DateTime(2017, 8, 23), new DateTime(2017, 8, 25), new DateTime(2017, 8, 28),
new DateTime(2017, 8, 30), new DateTime(2017, 8, 31), new DateTime(2017, 9, 1), new DateTime(2017, 9, 6), new DateTime(2017, 9, 7), new DateTime(2017, 9, 11), new DateTime(2017, 9, 12),
new DateTime(2017, 9, 13), new DateTime(2017, 9, 14), new DateTime(2017, 9, 15), new DateTime(2017, 9, 18), new DateTime(2017, 9, 19), new DateTime(2017, 9, 20), new DateTime(2017, 9, 25),
new DateTime(2017, 9, 26), new DateTime(2017, 9, 27), new DateTime(2017, 10, 9), new DateTime(2017, 10, 10), new DateTime(2017, 10, 11), new DateTime(2017, 10, 17), new DateTime(2017, 10, 18),
new DateTime(2017, 10, 19), new DateTime(2017, 10, 23), new DateTime(2017, 10, 24), new DateTime(2017, 10, 26), new DateTime(2017, 10, 27), new DateTime(2017, 10, 30), new DateTime(2017, 10, 31),
new DateTime(2017, 11, 1), new DateTime(2017, 11, 2), new DateTime(2017, 11, 9), new DateTime(2017, 11, 10), new DateTime(2017, 11, 13), new DateTime(2017, 11, 16), new DateTime(2017, 11, 17),
new DateTime(2017, 11, 20), new DateTime(2017, 11, 21), new DateTime(2017, 11, 27), new DateTime(2017, 11, 29), new DateTime(2017, 11, 30), new DateTime(2017, 12, 4), new DateTime(2017, 12, 5),
new DateTime(2017, 12, 6), new DateTime(2017, 12, 7)} ;

DateTime[] vixUnder11 = new DateTime[]
{
new DateTime(2014, 6, 19), new DateTime(2014, 6, 20), new DateTime(2014, 7, 2), new DateTime(2014, 7, 3), new DateTime(2017, 1, 25), new DateTime(2017, 1, 26),
new DateTime(2017, 1, 27), new DateTime(2017, 2, 10), new DateTime(2017, 4, 25), new DateTime(2017, 4, 26), new DateTime(2017, 4, 27),new DateTime(2017, 4, 28), 
new DateTime(2017, 5, 1), new DateTime(2017, 5, 2), new DateTime(2017, 5, 3), new DateTime(2017, 5, 4), new DateTime(2017, 5, 5), new DateTime(2017, 5, 8),
new DateTime(2017, 5, 11), new DateTime(2017, 5, 12), new DateTime(2017, 5, 15), new DateTime(2017, 5, 16), new DateTime(2017, 5, 23), new DateTime(2017, 5, 24),
new DateTime(2017, 5, 25), new DateTime(2017, 5, 26), new DateTime(2017, 5, 30), new DateTime(2017, 5, 31), new DateTime(2017, 6, 1), new DateTime(2017, 6, 6),
new DateTime(2017, 6, 7), new DateTime(2017, 6, 8), new DateTime(2017, 6, 9), new DateTime(2017, 6, 13), new DateTime(2017, 6, 14), new DateTime(2017, 6, 16),
new DateTime(2017, 6, 19), new DateTime(2017, 6, 20), new DateTime(2017, 6, 21), new DateTime(2017, 6, 22), new DateTime(2017, 6, 23), new DateTime(2017, 6, 26), 
new DateTime(2017, 6, 27), new DateTime(2017, 6, 28), new DateTime(2017, 7, 3), new DateTime(2017, 7, 12), new DateTime(2017, 7, 13), new DateTime(2017, 7, 18),
new DateTime(2017, 7, 27), new DateTime(2017, 7, 28), new DateTime(2017, 7, 31), new DateTime(2017, 8, 1), new DateTime(2017, 8, 2), new DateTime(2017, 8, 3),
new DateTime(2017, 8, 4), new DateTime(2017, 8, 7), new DateTime(2017, 8, 8), new DateTime(2017, 8, 31), new DateTime(2017, 9, 1), new DateTime(2017, 9, 11),
new DateTime(2017, 9, 12), new DateTime(2017, 9, 13), new DateTime(2017, 9, 14), new DateTime(2017, 9, 15), new DateTime(2017, 9, 18), new DateTime(2017, 9, 19),
new DateTime(2017, 9, 20), new DateTime(2017, 9, 25), new DateTime(2017, 9, 26), new DateTime(2017, 9, 27), new DateTime(2017, 10, 9), new DateTime(2017, 10, 10),
new DateTime(2017, 10, 11), new DateTime(2017, 10, 17), new DateTime(2017, 10, 18), new DateTime(2017, 10, 19), new DateTime(2017, 10, 23), new DateTime(2017, 10, 24),
new DateTime(2017, 10, 27), new DateTime(2017, 10, 30), new DateTime(2017, 10, 31), new DateTime(2017, 11, 1), new DateTime(2017, 11, 2), new DateTime(2017, 11, 9),
new DateTime(2017, 11, 21), new DateTime(2017, 11, 27), new DateTime(2017, 11, 29), new DateTime(2017, 12, 7)} ;

//initialize variable used to decide if IV is too high to enter or not
bool okToTrade = true;


try {
	

    //there&apos;s something wrong with the backtest data on 01/04/2016
    if(Backtest.TradingDateTime.Date.ToString() == &quot;1/4/2016 12:00:00 AM&quot;) {
        if(currentTime &lt; startTime10AM) {
            return;
        }
    }

    //------- E N T R Y   R U L E S -------
    if(Position.IsOpen == false) {

		foreach( DateTime date in vixUnder12)
	{
		if (date.Date == Backtest.TradingDateTime.Date)
		{
			okToTrade = true;
			WriteLog(date.Date +  &quot; IS in list of initiation days&quot;);
		}
	}
	
	if (okToTrade == false) 
	{
		WriteLog(&quot;okToTrade is &quot; + okToTrade.ToString());
		return;
	}
		
        //reinitilize tag
        Position.Tag = null;

        // even though it is cheating, don&apos;t initiate any trades on 8/21/15 and 8/24/15
        // because pricing data on 8/24 is a mess and it really throw off the backtest
        if(Backtest.TradingDateTime.Date.ToString() == &quot;8/24/2015 12:00:00 AM&quot;) {
            WriteLog(&quot;Backtest.TradingDateTime.Date: &quot; + Backtest.TradingDateTime.Date.Date);
            return;
        }
        if(Backtest.TradingDateTime.Date.ToString() == &quot;8/21/2015 12:00:00 AM&quot;) {
            WriteLog(&quot;Backtest.TradingDateTime.Date: &quot; + Backtest.TradingDateTime.Date.Date);
            return;
        }

        //there&apos;s something wrong with the backtest data on 12/20/2012 until 11:00 AM
        if(Backtest.TradingDateTime.Date.ToString() == &quot;12/20/2012 12:00:00 AM&quot;) {
            if(currentTime &lt;= startTime12202012) {
                return;
            }
        }

        //there&apos;s something wrong with the backtest data on 8/1/2011 - 8/3/2011, don&apos;t initiate anything on those days
        if(Backtest.TradingDateTime.Date.ToString() == &quot;8/1/2011 12:00:00 AM&quot;) {
            return;
        }
        if(Backtest.TradingDateTime.Date.ToString() == &quot;8/2/2011 12:00:00 AM&quot;) {
            return;
        }
        if(Backtest.TradingDateTime.Date.ToString() == &quot;8/3/2011 12:00:00 AM&quot;) {
            return;
        }

        //if initiation week is set, then only initiate trades that week of the month
        //4th week includes days 28-31 as well
        if((Backtest.TradingDateTime.Day &gt;= PARAM_InitiationDayMin.Day) &amp;&amp;(Backtest.TradingDateTime.Day &lt;= PARAM_InitiationDayMax.Day)) {
            if(Backtest.TradingDateTime.ToLocalTime().TimeOfDay == startTime) WriteLog(&quot;Ok to take trades this week - Day=&quot; + Backtest.TradingDateTime.Day + &quot; Min=&quot; + PARAM_InitiationDayMin.Day + &quot; Max=&quot; + PARAM_InitiationDayMax.Day);
        } else {
            if(Backtest.TradingDateTime.ToLocalTime().TimeOfDay == startTime) WriteLog(&quot;NOT Ok to take trades this week - Day=&quot; + Backtest.TradingDateTime.Day + &quot; Min=&quot; + PARAM_InitiationDayMin.Day + &quot; Max=&quot; + PARAM_InitiationDayMax.Day);
            return;
        }

        //Check if underlying movement within entry SD limits
        double maxSDup = 0.0;
        double maxSDdown = 0.0;
        GetMaxSDMovement(PARAM_UnderlyingMovementSDDays, ref maxSDup, ref maxSDdown);
        if(maxSDup &gt; PARAM_UnderlyingMovementSDup) {
            //Check Time is 8:30 AM otherwise this logs every 5 min but SD value is static for the entire day
            if(Backtest.TradingDateTime.ToLocalTime().TimeOfDay == new TimeSpan(15, 00, 0)) { //Convert from UTC to localtime
                WriteLog(&quot;SD Up exceeded: maxSDup = &quot; + maxSDup);
                return; // Max SD on upside exceeded
            }
        }
        if(maxSDdown &lt; PARAM_UnderlyingMovementSDdown) {
            //Check Time is 8:30 AM otherwise this logs every 5 min but SD value is static for the entire day
            if(Backtest.TradingDateTime.ToLocalTime().TimeOfDay == new TimeSpan(15, 00, 0)) { //Convert from UTC to localtime
                WriteLog(&quot;SD Down exceeded: maxSDdown = &quot; + maxSDdown);
                return; // Max SD on downside exceeded
            }
        }

        //DO not initiate if the market is going haywire
        if(Underlying.IV &lt;= PARAM_MaxUnderlyingIV) {

            if((currentTime &gt;= startTime) &amp;&amp;(currentTime &lt;= endTime)) {

                //Find the month expiration cycle
                var frontMonthExpiration = GetExpiryByDTE(PARAM_FrontMonthMinDTE, PARAM_FrontMonthMaxDTE);
                var backMonthExpiration = GetExpiryByDTE(PARAM_BackMonthMinDTE, PARAM_BackMonthMaxDTE);
                if(frontMonthExpiration == null) {
					WriteLog(&quot;no front month option found between &quot; + PARAM_FrontMonthMinDTE + &quot; and &quot; + PARAM_FrontMonthMaxDTE + &quot; DTE&quot;);
					return; // Haven&apos;t found an expiration matching our criteria
				}
				if(backMonthExpiration == null) {
					WriteLog(&quot;no back month option found between &quot; + PARAM_BackMonthMinDTE + &quot; and &quot; + PARAM_BackMonthMaxDTE + &quot; DTE&quot;);
					return; // Haven&apos;t found an expiration matching our criteria
				}
				
                //Create a new Model Position and build a doulbe calendar using the expiration cycles we found above.
                var modelPosition = NewModelPosition();
                var legShortPut = CreateModelLeg(SELL, 1, GetOptionByDelta(Put,-PARAM_FrontMonthPutDelta, frontMonthExpiration), &quot;ShortPut-&quot; + Position.Adjustments);
                modelPosition.AddLeg(legShortPut);
                var legLongPut = CreateModelLeg(BUY, 1, GetOptionByStrike(Put,(legShortPut.Strike - PARAM_PutDiagonalWidth), backMonthExpiration, true), &quot;LongPut-&quot; + Position.Adjustments);
                modelPosition.AddLeg(legLongPut);
                var legShortCall = CreateModelLeg(SELL, 1, GetOptionByDelta(Call,PARAM_FrontMonthCallDelta, frontMonthExpiration), &quot;ShortCall-&quot; + Position.Adjustments);
                modelPosition.AddLeg(legShortCall);
                var legLongCall = CreateModelLeg(BUY, 1, GetOptionByStrike(Call,(legShortCall.Strike + PARAM_CallDiagonalWidth), backMonthExpiration, true), &quot;LongCall-&quot; + Position.Adjustments);
                modelPosition.AddLeg(legLongCall);
              
                modelPosition.CommitTrade(&quot;Buy Double Diagonal 1 lot&quot;);

                //determine margin of a 1 lot so we can figure out how many lots to put on
                double nl = PARAM_InitialMargin / Position.Margin;
                int numLots =(int) nl;
                WriteLog(&quot;numLots: &quot; + numLots);
                var modelPosition2 = NewModelPosition();
                legShortPut = CreateModelLeg(SELL, numLots, GetOptionByStrike(Put,(legShortPut.Strike), frontMonthExpiration, true), &quot;ShortPut-&quot; + Position.Adjustments);
                modelPosition2.AddLeg(legShortPut);
                legLongPut = CreateModelLeg(BUY, numLots, GetOptionByStrike(Put,(legLongPut.Strike), backMonthExpiration, true), &quot;LongPut-&quot; + Position.Adjustments);
                modelPosition2.AddLeg(legLongPut);
                legShortCall = CreateModelLeg(SELL, numLots, GetOptionByStrike(Call,(legShortCall.Strike), frontMonthExpiration, true), &quot;ShortCall-&quot; + Position.Adjustments);
                modelPosition2.AddLeg(legShortCall);
                legLongCall = CreateModelLeg(BUY, numLots, GetOptionByStrike(Call,(legLongCall.Strike), backMonthExpiration, true), &quot;LongCall-&quot; + Position.Adjustments);
                modelPosition2.AddLeg(legLongCall);

                //Commit the Model Position to the Trade Log and add a comment
                modelPosition2.CommitTrade(&quot;Buy Double Diagonal number of lots: &quot; + numLots);
                WriteLog(&quot;Trade Entry - IV: &quot; + Underlying.IV);
				
				//now lets get our deltas flat to slightly positivie
				int deltas = (int) Position.Delta;
				if (deltas &lt; null) {
								
		            //Create a new Model Position
		            var modelPosition3=NewModelPosition(); 
                	legLongCall = CreateModelLeg(SELL, 1, GetOptionByStrike(Call,(legLongCall.Strike), backMonthExpiration, true), &quot;LongCall-&quot; + Position.Adjustments);
                	modelPosition3.AddLeg(legLongCall);
					var legNewLongCall = CreateModelLeg(BUY, 1, GetOptionByStrike(Call, Underlying.Last, backMonthExpiration, true), &quot;LongCall-&quot; + Position.Adjustments);
                	modelPosition3.AddLeg(legNewLongCall);

		            //Commit the Model Position to the Trade Log and add a comment
		            modelPosition3.CommitTrade(&quot;Flatten deltas&quot;);
					}
				}
        } else {
            WriteLog(&quot;Not initiating a trade because Underlying.IV = &quot; + Underlying.IV + &quot; and max is &quot; + PARAM_MaxUnderlyingIV);
        }
    }
} catch(Exception ex) {
    WriteLog(&quot;Try/Catch hit in initiation block&quot;);
}

//------- A D J U S T M E N T   R U L E S -------
//


//------- E X I T   R U L E S -------
try {
    if(Position.IsOpen == true) {

        if((currentTime &gt;= startTime) &amp;&amp;(currentTime &lt;= endTime)) {

            double PnL = 0;
            if(Backtest.Tag != null) { PnL =(double) Backtest.Tag; }

            //Check Profit Target
            if(Position.PnL &gt;=((PARAM_InitialMargin * PARAM_ProfitTarget) / 100)) {
                Position.Close(&quot;Hit Profit Target&quot;);
                Backtest.Tag = PnL + Position.PnL - Position.Commission;
                WriteLog(&quot;Backtest.Tag=&quot; + Backtest.Tag);
                WriteLog(&quot;Position.PnL=&quot; + Position.PnL);
            }

            //Check Max Loss
            if(Position.PnL &lt;=((PARAM_InitialMargin * -PARAM_MaxLoss) / 100)) {
                Position.Close(&quot;Hit Max Loss&quot;);
                Backtest.Tag = PnL + Position.PnL - Position.Commission;
                WriteLog(&quot;Backtest.Tag=&quot; + Backtest.Tag);
                WriteLog(&quot;Position.PnL=&quot; + Position.PnL);
            }

            //Check Minimum DTE
            if(Position.DTE &lt;= PARAM_ExitDTE) {
                Position.Close(&quot;Hit Minimum DTE&quot;);
                Backtest.Tag = PnL + Position.PnL - Position.Commission;
                WriteLog(&quot;Backtest.Tag=&quot; + Backtest.Tag);
                WriteLog(&quot;Position.PnL=&quot; + Position.PnL);
            }

            //Check Max Adjustments
            if(Position.Adjustments &gt;= PARAM_MaxAdjustments) {
                Position.Close(&quot;Hit Max Adjustments&quot;);
                Backtest.Tag = PnL + Position.PnL - Position.Commission;
                WriteLog(&quot;Backtest.Tag=&quot; + Backtest.Tag);
                WriteLog(&quot;Position.PnL=&quot; + Position.PnL);
            }

			//exit at Expiration BE
			//don&apos;t want this being triggered to to sag in the middle, so only beyond our longs
			if (Underlying.Last &gt;  Position.GetLegByName(&quot;LongCall*&quot;).Strike) {
				if (Underlying.Last &lt; Position.Expiration().LowerBE) {
					Position.Close(&quot;Hit Lower BE&quot;);
	                Backtest.Tag = PnL + Position.PnL - Position.Commission;
	                WriteLog(&quot;Backtest.Tag=&quot; + Backtest.Tag);
	                WriteLog(&quot;Position.PnL=&quot; + Position.PnL);
				}
			}
			if (Underlying.Last &lt;  Position.GetLegByName(&quot;LongPut*&quot;).Strike) {
				if (Underlying.Last &gt; Position.Expiration().UpperBE) {
					Position.Close(&quot;Hit Upper BE&quot;);
	                Backtest.Tag = PnL + Position.PnL - Position.Commission;
	                WriteLog(&quot;Backtest.Tag=&quot; + Backtest.Tag);
	                WriteLog(&quot;Position.PnL=&quot; + Position.PnL);
				}
			}
			
            // even though it is cheating, don&apos;t initiate any trades on 8/21/15 and 8/24/15
            // because pricing data on 8/24 is a mess and it really throw off the backtest
            if(Backtest.TradingDateTime.Date.ToString() == &quot;8/24/2015 12:00:00 AM&quot;) {
                Position.Close(&quot;8/24/2015 data problem&quot;);
                return;
            }
            if(Backtest.TradingDateTime.Date.ToString() == &quot;8/21/2015 12:00:00 AM&quot;) {
                Position.Close(&quot;8/21/2015 data problem&quot;);
                return;
            }
			
            //this is an ugly workaround for some data problem on 8-2-11 and 8-3-11 that causes my adjustment/exti rules to not be applied
            //we&apos;re just closing the trade before the data problems begin 
            if(Backtest.TradingDateTime.Date.ToString() == &quot;8/1/2011 12:00:00 AM&quot;) {
                WriteLog(&quot;Closing due to rule for 8/1/2011&quot;);
                Position.Close(&quot;Failed to lookup adjustment options - WORKAROUND for 8/1/2011, just exit&quot;);
            }
        }
		
    }
} catch(Exception ex) {
    WriteLog(&quot;Try/Catch hit in adjustment block&quot;);
}</TickEventCode>
    </StrategyCode>
</AlgoNETExplorer>
