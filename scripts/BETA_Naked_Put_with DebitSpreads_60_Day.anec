<?xml version="1.0" encoding="iso-8859-1" ?>

<AlgoNETExplorer>
    <StrategyCode StrategyName="BETA_Naked_Put_with DebitSpreads_60_Day" Language="C# .NET">
        <TickEventCode>//
// Copyright THJ Systems Ltd
//
//------- D E S C R I P T I O N -------
//



//------- P E R F O R M A N C E   P A R A M E T E R S -------
Backtest.Configuration.UseWeekly=true;
Backtest.Configuration.UseQuarterly=true;
Backtest.Configuration.MaxExpirationDTE=70;
Backtest.Configuration.CommissionRates.OptionPerContract=1.0;

if (Backtest.UnderlyingSymbol==&quot;SPX&quot;)
{
            Backtest.Configuration.PriceValidation.PositionConfirmationCount=3;
            Backtest.Configuration.PriceValidation.PositionPercChange=5;
}

//------- O P T I M I Z A T I O N   P A R A M E T E R S -------
int PARAM_NearMonth=60;
int PARAM_FarMonth=70;
int PARAM_NumberOfContracts=10;
int PARAM_ProfitTarget=7;
int PARAM_MaxLoss=10;
int PARAM_ProfitTargetDollars=8000;
int PARAM_MaxLossDollars=10000;
int PARAM_ExitDTE=21;
int PARAM_DeltaAdjustTriggerOffset=35;
int PARAM_AdjustDownMoveLimit=99;
int PARAM_DeltaTarget=40;

//max underlying IV when initiating a trade
int PARAM_MaxUnderlyingIV=25;

//entry rules for market condition
double PARAM_UnderlyingMovementSDdown=-1.5;
double PARAM_UnderlyingMovementSDup=1.5;
int PARAM_UnderlyingMovementSDDays=3;

//max margin to use for trade
int PARAM_MaxMargin=50000;

//Do not take action before 9:00 AM
TimeSpan currentTime=Backtest.TradingDateTime.ToLocalTime().TimeOfDay;                //Convert from UTC to localtime
TimeSpan startTime = new TimeSpan(9, 0, 0);                                           //9:00 AM
TimeSpan endTime = new TimeSpan(15, 0, 0);                                            //3:00 PM

//work around backtest data problem for a specific date
TimeSpan startTime12202012 = new TimeSpan(12, 0, 0); 

//only initiate trades on x week of the month
int PARAM_InitiationDayMin=1;
int PARAM_InitiationDayMax=7;


//log params at the beginning of the run
if (Backtest.TradeCount == 1)
{
		WriteLog(&quot;-- BEGIN PARAMETERS ------------------------------------------&quot; );	
		WriteLog(&quot;PARAM_NearMonth:&quot; + PARAM_NearMonth );
		WriteLog(&quot;PARAM_FarMonth: &quot; + PARAM_FarMonth );
		WriteLog(&quot;PARAM_ProfitTarget: &quot;  + PARAM_ProfitTarget);
		WriteLog(&quot;PARAM_MaxLoss: &quot; + PARAM_MaxLoss);
		WriteLog(&quot;PARAM_MaxUnderlyingIV: &quot; + PARAM_MaxUnderlyingIV );
		WriteLog(&quot;PARAM_UnderlyingMovementSDdown: &quot; + PARAM_UnderlyingMovementSDdown );
		WriteLog(&quot;PARAM_UnderlyingMovementSDup: &quot; + PARAM_UnderlyingMovementSDup );
		WriteLog(&quot;PARAM_UnderlyingMovementSDDays: &quot; + PARAM_UnderlyingMovementSDDays );
		WriteLog(&quot;PARAM_UnderlyingMovementSDDays: &quot; + PARAM_UnderlyingMovementSDDays );
		WriteLog(&quot;PARAM_DeltaTarget: &quot; + PARAM_DeltaTarget);
		WriteLog(&quot;PARAM_DeltaAdjustTriggerOffset: &quot; + PARAM_DeltaAdjustTriggerOffset);
		WriteLog(&quot;startTime: &quot; + startTime + &quot; endTime: &quot; + endTime );
		WriteLog(&quot;-- END PARAMETERS ------------------------------------------&quot; );	
}

try
{
	
	//------- E N T R Y   R U L E S -------
	if(Position.IsOpen==false) {
		

		// even though it is cheating, don&apos;t initiate any trades on 8/21/15 and 8/24/15
		// because pricing data on 8/24 is a mess and it really throw off the backtest
		
		if (Backtest.TradingDateTime.Date.ToString() == &quot;8/24/2015 12:00:00 AM&quot;)
			{
				WriteLog(&quot;Backtest.TradingDateTime.Date: &quot; + Backtest.TradingDateTime.Date.Date);
				return;
			}
		if (Backtest.TradingDateTime.Date.ToString() == &quot;8/21/2015 12:00:00 AM&quot;)
			{
				WriteLog(&quot;Backtest.TradingDateTime.Date: &quot; + Backtest.TradingDateTime.Date.Date);
				return;
			}

		//there&apos;s something wrong with the backtest data on 12/20/2012 until 11:00 AM
		if (Backtest.TradingDateTime.Date.ToString() == &quot;12/20/2012 12:00:00 AM&quot;)
			{
				if (currentTime &lt;= startTime12202012) {
					return;
				}
			}
		
	      
	    //Check if underlying movement within entry SD limits
	    double maxSDup=0.0;
	    double maxSDdown=0.0;
	    GetMaxSDMovement(PARAM_UnderlyingMovementSDDays, ref maxSDup, ref maxSDdown);
	    if (maxSDup &gt; PARAM_UnderlyingMovementSDup) 
	      {

	    //Check Time is 8:30 AM otherwise this logs every 5 min but SD value is static for the entire day
	    if (Backtest.TradingDateTime.ToLocalTime().TimeOfDay == new TimeSpan(15, 00, 0)) {        //Convert from UTC to localtime
	        WriteLog(&quot;SD Up exceeded: maxSDup = &quot; + maxSDup );
	            return;         // Max SD on upside exceeded
	      }
	      }
	    if (maxSDdown &lt; PARAM_UnderlyingMovementSDdown) 
	            {
	    //Check Time is 8:30 AM otherwise this logs every 5 min but SD value is static for the entire day
	    if (Backtest.TradingDateTime.ToLocalTime().TimeOfDay == new TimeSpan(15, 00, 0)) {        //Convert from UTC to localtime
	            WriteLog(&quot;SD Down exceeded: maxSDdown = &quot; + maxSDdown );
	            return;     // Max SD on downside exceeded
	      }
	      }
	      
	      //DO not initiate if the market is going haywire
	      if (Underlying.IV &lt;= PARAM_MaxUnderlyingIV) {
	      
	          if ((currentTime &gt;= startTime) &amp;&amp; (currentTime &lt;= endTime)) {
	        
	                //Find the month expiration cycle
	                var monthExpiration=GetExpiryByDTE(PARAM_NearMonth, PARAM_FarMonth);
	                if (monthExpiration == null) return;   // Haven&apos;t found an expiration matching our criteria

	                //Create a new Model Position and build an ATM Butterfly using the expiration cycles we found above.
	                var modelPosition=NewModelPosition();
	                var legAsym1=CreateModelLeg(BUY,10, GetOptionByDelta(Put, -20, monthExpiration),&quot;LongLegUpper-&quot; + Position.Adjustments);
	                modelPosition.AddLeg(legAsym1);
	                var legAsym2=CreateModelLeg(SELL,10, GetOptionByDelta(Put, -12, monthExpiration),&quot;ShortLeg-&quot; + Position.Adjustments);
	                modelPosition.AddLeg(legAsym2);
	                var legAsym3=CreateModelLeg(SELL,25, GetOptionByDelta(Put, -8, monthExpiration),&quot;ShortLegLower-&quot; + Position.Adjustments);
	                modelPosition.AddLeg(legAsym3);
					var legAsym4=CreateModelLeg(BUY,25, GetOptionByDelta(Put, -3, monthExpiration),&quot;LongLegLower-&quot; + Position.Adjustments);
	                modelPosition.AddLeg(legAsym4);
					modelPosition.CommitTrade(&quot;Buy 50-35-20 Butterfly 1 lot&quot;);

					//determine margin of a 1 lot so we can figure out how many lots to put on
					/*
					double nl = PARAM_MaxMargin / Position.Margin;
					int numLots = (int) nl;				
	                WriteLog(&quot;numLots: &quot; + numLots);
					var modelPosition2=NewModelPosition();
	                legAsym1=CreateModelLeg(BUY,numLots, GetOptionByDelta(Put, -50, monthExpiration),&quot;LongLegUpper-&quot; + Position.Adjustments);
	                modelPosition2.AddLeg(legAsym1);
	                legAsym2=CreateModelLeg(SELL,numLots*2, GetOptionByDelta(Put, -35, monthExpiration),&quot;ShortLeg-&quot; + Position.Adjustments);
	                modelPosition2.AddLeg(legAsym2);
	                legAsym3=CreateModelLeg(BUY,numLots, GetOptionByDelta(Put, -16, monthExpiration),&quot;LongLegLower-&quot; + Position.Adjustments);
	                modelPosition2.AddLeg(legAsym3);
					
	                  
	                //Commit the Model Position to the Trade Log and add a comment
	                modelPosition2.CommitTrade(&quot;Buy 50-35-20 Butterfly number of lots: &quot; + numLots );
	                WriteLog(&quot;Trade Entry - IV: &quot; + Underlying.IV);
					*/
	            }
	     }
	      else
	      {
	            WriteLog(&quot;Not initiating a trade because Underlying.IV = &quot; + Underlying.IV + &quot; and max is 25&quot;);
	      }
	}
}

catch(Exception ex)
{
      WriteLog(&quot;Try/Catch hit&quot;);    
}

//------- A D J U S T M E N T   R U L E S -------
try
{
//------- A D J U S T M E N T   R U L E S -------
if(Position.IsOpen==true) {

    if ((currentTime &gt;= startTime) &amp;&amp; (currentTime &lt;= endTime)) {
                  
          //Check if Short Strike Delta&apos;s within tollerance
          var origShortLeg=Position.GetLegByName(&quot;ShortLeg*&quot;);
          if (origShortLeg!=null) {
              double delta=Math.Abs(origShortLeg.Delta);
              double deltaTarget=PARAM_DeltaTarget;
                  WriteLog(&quot;Downside Check - delta: &quot; + delta + &quot; PARAM_DeltaTarget: &quot; + (PARAM_DeltaTarget + PARAM_DeltaAdjustTriggerOffset) );
              if (delta&gt;PARAM_DeltaTarget + PARAM_DeltaAdjustTriggerOffset) {
              	 //   WriteLog(&quot;Close: Delta change (Downside)&quot;);
                //    Position.Close(&quot;Close: Delta change (Downside)&quot;);
              }
          }
      }
	
		//Check if Underlying moved outside of BreakEven limit
	    var midBE = (Position.Expiration().LowerBE + Position.Expiration().UpperBE) / 2;
	    var targetLower = midBE - ((midBE - Position.Expiration().LowerBE) * PARAM_AdjustDownMoveLimit / 100);
	    if (Underlying.Last &lt;= targetLower) {
	        Position.Close(&quot;Close: Expiration BE Hit (downside)&quot;);
	    }


}
}

catch(Exception ex)
{
      WriteLog(&quot;Try/Catch hit in adjustment block&quot;);    
}

//------- E X I T   R U L E S -------
if(Position.IsOpen==true) {

      if ((currentTime &gt;= startTime) &amp;&amp; (currentTime &lt;= endTime)) {
            
    //Check Profit Target
    if(Position.PnL &gt;= PARAM_ProfitTargetDollars) Position.Close(&quot;Hit Profit Target&quot;);

    //Check Max Loss
    if(Position.PnL &lt;= -PARAM_MaxLossDollars) Position.Close(&quot;Hit Max Loss&quot;);

    //Check Minimum DTE
    if(Position.DTE &lt;= PARAM_ExitDTE) Position.Close(&quot;Hit Minimum DTE&quot;);

    //Check Max Adjustments
    if(Position.Adjustments &gt;= 10) Position.Close(&quot;Hit Max Adjustments&quot;);
      
      }

}</TickEventCode>
    </StrategyCode>
</AlgoNETExplorer>
