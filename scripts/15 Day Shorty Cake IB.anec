<?xml version="1.0" encoding="iso-8859-1" ?>

<AlgoNETExplorer>
    <StrategyCode StrategyName="15 Day Shorty Cake IB" Language="C# .NET">
        <TickEventCode>//
//
//
//------- D E S C R I P T I O N -------
//


//------- P E R F O R M A N C E   P A R A M E T E R S -------
Backtest.Configuration.UseWeekly = true;
Backtest.Configuration.UseQuarterly = true;
Backtest.Configuration.MaxExpirationDTE = 18;
Backtest.Configuration.CommissionRates.OptionPerContract = 1.0;

if (Backtest.UnderlyingSymbol == &quot;SPX&quot;) {
 Backtest.Configuration.PriceValidation.PositionConfirmationCount=3;
 Backtest.Configuration.PriceValidation.PositionPercChange=5;
}

//------- O P T I M I Z A T I O N   P A R A M E T E R S -------
int PARAM_NearMonth = 15;
int PARAM_FarMonth = 18;
int PARAM_ProfitTarget = 12;
int PARAM_ProfitTargetAfterHedge = 3;
int PARAM_MaxLoss = 15;
int PARAM_ExitDTE = 5;
int PARAM_DeltaAdjustTriggerOffset = 35;
int PARAM_MaxAdjustments=10;

//strikes we are using for the butterfly
int PARAM_LongLegUpper = -50;
int PARAM_ShortLeg = -35;
int PARAM_LongLegLower = -16;

//max underlying IV when initiating a trade
int PARAM_MaxUnderlyingIV = 25;

//roll spreads out at percentage of expiration breakeven
int PARAM_AdjustUpMoveLimit=99;
int PARAM_AdjustDownMoveLimit=99;

//entry rules for market condition
double PARAM_UnderlyingMovementSDdown = -1.5;
double PARAM_UnderlyingMovementSDup = 1.5;
int PARAM_UnderlyingMovementSDDays = 3;

//max margin to use for trade
double PARAM_MaxMargin = 50000;
var PARAM_ScaleMargin = false;

//initiation day of month minimum and maximum
int PARAM_InitiationDayMinimum=1;
int PARAM_InitiationDayMaximum=31;

//if we have had to hedge, lower profit target
if (Position.IsOpen == true) {
 foreach(Position.IPositionLeg leg in Position.GetAllLegs()) {
  if (leg.LegName == &quot;Hedge-1&quot;) {
   PARAM_ProfitTarget = PARAM_ProfitTargetAfterHedge;
   WriteLog(&quot;Hedge has been added so reducing profit target to &quot; + PARAM_ProfitTarget);
  }
 }
}

//Do not take action before 9:00 AM
TimeSpan currentTime = Backtest.TradingDateTime.ToLocalTime().TimeOfDay; //Convert from UTC to localtime
TimeSpan startTime = new TimeSpan(8, 50, 0); //9:00 AM
TimeSpan endTime = new TimeSpan(15, 5, 0); //3:00 PM

//scalable margin - add 50% of PnL to size up
//but remove entire negative PnL if PnL is below 0
 if (PARAM_ScaleMargin == true) {
    if (Backtest.Tag != null) {
	double addMargin = (double)Backtest.Tag;
	if (addMargin&gt;0) {
	PARAM_MaxMargin = PARAM_MaxMargin + (addMargin/2);
	} else {
	PARAM_MaxMargin = PARAM_MaxMargin + (addMargin);
	}
	}
  if (Backtest.TradingDateTime.ToLocalTime().TimeOfDay == startTime) WriteLog(&quot;PARAM_MaxMargin=&quot; + PARAM_MaxMargin);
  }

//work around backtest data problem for a specific date
TimeSpan startTime12202012 = new TimeSpan(12, 0, 0);

//minimum and maximum date of the month to enter a trade on
//year and month don&apos;t matter for us, because we will only use the .Day property
DateTime PARAM_InitiationDayMin = new DateTime(2000, 1, PARAM_InitiationDayMinimum);
DateTime PARAM_InitiationDayMax = new DateTime(2999, 12, PARAM_InitiationDayMaximum);

//log params at the beginning of the run
if (Backtest.TradingDateTime.ToLocalTime().TimeOfDay == startTime) {
	if (Backtest.TradeCount == 1) {
	 WriteLog(&quot;-- BEGIN PARAMETERS ------------------------------------------&quot;);
	 WriteLog(&quot;PARAM_NearMonth:&quot; + PARAM_NearMonth);
	 WriteLog(&quot;PARAM_FarMonth: &quot; + PARAM_FarMonth);
	 WriteLog(&quot;PARAM_LongLegUpper:&quot; + PARAM_LongLegUpper);
     WriteLog(&quot;PARAM_ShortLeg:&quot; + PARAM_ShortLeg);
	 WriteLog(&quot;PARAM_LongLegLower:&quot; + PARAM_LongLegLower);
	 WriteLog(&quot;PARAM_ProfitTarget: &quot; + PARAM_ProfitTarget);
	 WriteLog(&quot;PARAM_MaxLoss: &quot; + PARAM_MaxLoss);
	 WriteLog(&quot;PARAM_MaxUnderlyingIV: &quot; + PARAM_MaxUnderlyingIV);
	 WriteLog(&quot;PARAM_UnderlyingMovementSDdown: &quot; + PARAM_UnderlyingMovementSDdown);
	 WriteLog(&quot;PARAM_UnderlyingMovementSDup: &quot; + PARAM_UnderlyingMovementSDup);
	 WriteLog(&quot;PARAM_UnderlyingMovementSDDays: &quot; + PARAM_UnderlyingMovementSDDays);
	 WriteLog(&quot;PARAM_UnderlyingMovementSDDays: &quot; + PARAM_UnderlyingMovementSDDays);
	 WriteLog(&quot;PARAM_DeltaAdjustTriggerOffset: &quot; + PARAM_DeltaAdjustTriggerOffset);
	 WriteLog(&quot;startTime: &quot; + startTime + &quot; endTime: &quot; + endTime);
	 WriteLog(&quot;-- END PARAMETERS ------------------------------------------&quot;);
	}
}
try {

 //------- E N T R Y   R U L E S -------
 if (Position.IsOpen == false) {

  //reinitilize tag
  Position.Tag = null;

  // even though it is cheating, don&apos;t initiate any trades on 8/21/15 and 8/24/15
  // because pricing data on 8/24 is a mess and it really throw off the backtest

  if (Backtest.TradingDateTime.Date.ToString() == &quot;8/24/2015 12:00:00 AM&quot;) {
   WriteLog(&quot;Backtest.TradingDateTime.Date: &quot; + Backtest.TradingDateTime.Date.Date);
   return;
  }
  if (Backtest.TradingDateTime.Date.ToString() == &quot;8/21/2015 12:00:00 AM&quot;) {
   WriteLog(&quot;Backtest.TradingDateTime.Date: &quot; + Backtest.TradingDateTime.Date.Date);
   return;
  }

  //there&apos;s something wrong with the backtest data on 12/20/2012 until 11:00 AM
  if (Backtest.TradingDateTime.Date.ToString() == &quot;12/20/2012 12:00:00 AM&quot;) {
   if (currentTime &lt;= startTime12202012) {
	return;
   }
  }

  //there&apos;s something wrong with the backtest data on 8/1/2011 - 8/3/2011, don&apos;t initiate anything on those days
  if (Backtest.TradingDateTime.Date.ToString() == &quot;8/1/2011 12:00:00 AM&quot;) {
   return;
  }
  if (Backtest.TradingDateTime.Date.ToString() == &quot;8/2/2011 12:00:00 AM&quot;) {
   return;
  }
  if (Backtest.TradingDateTime.Date.ToString() == &quot;8/3/2011 12:00:00 AM&quot;) {
   return;
  }

  //if initiation week is set, then only initiate trades that week of the month
  //4th week includes days 28-31 as well
  if ((Backtest.TradingDateTime.Day &gt;= PARAM_InitiationDayMin.Day) &amp;&amp; (Backtest.TradingDateTime.Day &lt;= PARAM_InitiationDayMax.Day)) {
   if (Backtest.TradingDateTime.ToLocalTime().TimeOfDay == startTime) WriteLog(&quot;Ok to take trades this week - Day=&quot; + Backtest.TradingDateTime.Day + &quot; Min=&quot; + PARAM_InitiationDayMin.Day + &quot; Max=&quot; + PARAM_InitiationDayMax.Day);
  } else {
   if (Backtest.TradingDateTime.ToLocalTime().TimeOfDay == startTime) WriteLog(&quot;NOT Ok to take trades this week - Day=&quot; + Backtest.TradingDateTime.Day + &quot; Min=&quot; + PARAM_InitiationDayMin.Day + &quot; Max=&quot; + PARAM_InitiationDayMax.Day);
   return;
  }

  //Check if underlying movement within entry SD limits
  double maxSDup = 0.0;
  double maxSDdown = 0.0;
  GetMaxSDMovement(PARAM_UnderlyingMovementSDDays, ref maxSDup, ref maxSDdown);
  if (maxSDup &gt; PARAM_UnderlyingMovementSDup) {
   //Check Time is 8:30 AM otherwise this logs every 5 min but SD value is static for the entire day
   if (Backtest.TradingDateTime.ToLocalTime().TimeOfDay == new TimeSpan(15, 00, 0)) { //Convert from UTC to localtime
	WriteLog(&quot;SD Up exceeded: maxSDup = &quot; + maxSDup);
	return; // Max SD on upside exceeded
   }
  }
  if (maxSDdown &lt; PARAM_UnderlyingMovementSDdown) {
   //Check Time is 8:30 AM otherwise this logs every 5 min but SD value is static for the entire day
   if (Backtest.TradingDateTime.ToLocalTime().TimeOfDay == new TimeSpan(15, 00, 0)) { //Convert from UTC to localtime
	WriteLog(&quot;SD Down exceeded: maxSDdown = &quot; + maxSDdown);
	return; // Max SD on downside exceeded
   }
  }

  //DO not initiate if the market is going haywire
  if (Underlying.IV &lt;= PARAM_MaxUnderlyingIV) {

   if ((currentTime &gt;= startTime) &amp;&amp; (currentTime &lt;= endTime)) {

	//Find the month expiration cycle
	var monthExpiration = GetExpiryByDTE(PARAM_NearMonth, PARAM_FarMonth);
	if (monthExpiration == null) return; // Haven&apos;t found an expiration matching our criteria

	//Create a new Model Position and build an ATM Butterfly using the expiration cycles we found above.
	var modelPosition = NewModelPosition();
	var legAsym1 = CreateModelLeg(SELL, 1, GetOptionByStrike(Put, Underlying.Last, monthExpiration, true), &quot;ShortPut-&quot; + Position.Adjustments);
	modelPosition.AddLeg(legAsym1);
	var legAsym2 = CreateModelLeg(BUY, 1, GetOptionByStrike(Put, Underlying.Last-70, monthExpiration, true), &quot;LongPut-&quot; + Position.Adjustments);
	modelPosition.AddLeg(legAsym2);
	var legAsym3 = CreateModelLeg(SELL, 1, GetOptionByStrike(Call, Underlying.Last, monthExpiration, true), &quot;ShortCall-&quot; + Position.Adjustments);
	modelPosition.AddLeg(legAsym3);
	var legAsym4 = CreateModelLeg(BUY, 1, GetOptionByStrike(Call, Underlying.Last+65, monthExpiration, true), &quot;LongCall-&quot; + Position.Adjustments);
	modelPosition.AddLeg(legAsym4);
	modelPosition.CommitTrade(&quot;Buy Shorty Cake 1 lot&quot;);

	//determine margin of a 1 lot so we can figure out how many lots to put on
	double nl = PARAM_MaxMargin / Position.Margin;
	int numLots = (int) nl;
	WriteLog(&quot;numLots: &quot; + numLots);
	var modelPosition2 = NewModelPosition();
	legAsym1 = CreateModelLeg(SELL, numLots, GetOptionByStrike(Put, Underlying.Last, monthExpiration, true), &quot;ShortPut-&quot; + Position.Adjustments);
	modelPosition2.AddLeg(legAsym1);
	legAsym2 = CreateModelLeg(BUY, numLots, GetOptionByStrike(Put, Underlying.Last-70, monthExpiration, true), &quot;LongPut-&quot; + Position.Adjustments);
	modelPosition2.AddLeg(legAsym2);
	legAsym3 = CreateModelLeg(SELL, numLots, GetOptionByStrike(Call, Underlying.Last, monthExpiration, true), &quot;ShortCall-&quot; + Position.Adjustments);
	modelPosition2.AddLeg(legAsym3);
	legAsym4 = CreateModelLeg(BUY, numLots, GetOptionByStrike(Call, Underlying.Last+65, monthExpiration, true), &quot;LongCall-&quot; + Position.Adjustments);
	modelPosition2.AddLeg(legAsym4);

	//Commit the Model Position to the Trade Log and add a comment
	modelPosition2.CommitTrade(&quot;Buy Shorty Cake Iron Butterfly number of lots: &quot; + numLots);
	WriteLog(&quot;Trade Entry - IV: &quot; + Underlying.IV);
   }
  } else {
   WriteLog(&quot;Not initiating a trade because Underlying.IV = &quot; + Underlying.IV + &quot; and max is 25&quot;);
  }
 }} catch (Exception ex) {
 WriteLog(&quot;Try/Catch hit in initiation block&quot;);
}

//------- A D J U S T M E N T   R U L E S -------
try {
  if (Position.IsOpen == true) {

  if ((currentTime &gt;= startTime) &amp;&amp; (currentTime &lt;= endTime)) {

  //Find the month expiration cycle
  var currentExpiration = GetExpiryByDTE(Position.GetLegByName(&quot;ShortPut*&quot;).DTE);

  var midBE = (Position.Expiration().LowerBE + Position.Expiration().UpperBE) / 2;
  var targetLower = midBE - (midBE - Position.Expiration().LowerBE);
  var targetUpper = midBE + (Position.Expiration().UpperBE - midBE);

  if (Underlying.StdDev&lt; -1.7) {
	 WriteLog(&quot;Standard Deviation greater than -1.7 &quot; + Underlying.StdDev);
	 var modelPosition = NewModelPosition();
	 int hedgeCount = (int) Position.Delta / 50;
	 var legHedge = CreateModelLeg(BUY, hedgeCount, GetOptionByDelta(Put, -40, GetExpiryByDTE(37, 44)), &quot;Insurance-&quot; + Position.Adjustments);
	 modelPosition.AddLeg(legHedge);
	 modelPosition.CommitTrade(&quot;Buy insurance&quot;);
	}
	
  // roll put fly down 30 points if we hit lower breakeven
  if (Underlying.Last &lt;= targetLower) {

			//Create a new Model Position
            var modelPosition=NewModelPosition();

            //Close the Lower Wing Vertical
            var oldLongLeg=Position.GetLegByName(&quot;LongPut*&quot;).CreateClosingModelLeg();
            modelPosition.AddLeg(oldLongLeg);
            var oldShortLeg=Position.GetLegByName(&quot;ShortPut*&quot;).CreateClosingModelLeg();
            modelPosition.AddLeg(oldShortLeg);

            //Open new vertical with short leg at DeltaTarget
			var newShortLeg = CreateModelLeg(Sell, oldShortLeg.Qty, GetOptionByStrike(Put, oldShortLeg.Strike - 30, currentExpiration), &quot;ShortPut-&quot; + Position.Adjustments);
	  		modelPosition.AddLeg(newShortLeg);
			var newLongLeg = CreateModelLeg(Buy, oldLongLeg.Qty, GetOptionByStrike(Put, oldLongLeg.Strike - 30, currentExpiration), &quot;LongPut-&quot; + Position.Adjustments);
            modelPosition.AddLeg(newLongLeg);

            //Commit the Model Position to the Trade Log and add a comment
            modelPosition.CommitTrade(&quot;Roll Lower Wing&quot;);
		

    }

	if (Underlying.Last &gt;= targetUpper) {

            //Create a new Model Position
            var modelPosition=NewModelPosition();

            //Close the Upper Wing Vertical
            var oldLongLeg=Position.GetLegByName(&quot;LongCall*&quot;).CreateClosingModelLeg();
            modelPosition.AddLeg(oldLongLeg);
            var oldShortLeg=Position.GetLegByName(&quot;ShortCall*&quot;).CreateClosingModelLeg();
            modelPosition.AddLeg(oldShortLeg);

		    //Open new vertical with short leg at DeltaTarget
			var newShortLeg = CreateModelLeg(Sell, oldShortLeg.Qty, GetOptionByStrike(Call, oldShortLeg.Strike + 30, currentExpiration), &quot;ShortCall-&quot; + Position.Adjustments);
	  		modelPosition.AddLeg(newShortLeg);
			var newLongLeg = CreateModelLeg(Buy, oldLongLeg.Qty, GetOptionByStrike(Call, oldLongLeg.Strike + 30, currentExpiration), &quot;LongCall-&quot; + Position.Adjustments);
            modelPosition.AddLeg(newLongLeg);

            //Commit the Model Position to the Trade Log and add a comment
            modelPosition.CommitTrade(&quot;Roll Upper Wing&quot;);
        
    }
	
	
   //Check if Short Strike Delta&apos;s within tolerance on downside
   var origShortLeg = Position.GetLegByName(&quot;ShortPut*&quot;);
   if (origShortLeg != null) {
	double delta = Math.Abs(origShortLeg.Delta);
	if (currentExpiration == null) {
	 return; // Haven&apos;t found an expiration matching our criteria
	}
	if (Position.Delta &gt; (16 * Position.GetLegByName(&quot;ShortPut*&quot;).Qty)) {
	 WriteLog(&quot;Delta greater than 16 per contract - &quot; + Position.Delta);
	 WriteLog(&quot;Position.Tag=&quot; + Position.Tag);
	  WriteLog(&quot;Short strike delta &gt; 16 per contract - delta: &quot; + (16 * Position.GetLegByName(&quot;ShortPut*&quot;).Qty));
      var oldShortLeg=Position.GetLegByName(&quot;ShortPut*&quot;).CreateClosingModelLeg();
	  var modelPosition = NewModelPosition();
	  modelPosition.AddLeg(oldShortLeg);
	  var newShortLeg = CreateModelLeg(Sell, oldShortLeg.Qty, GetOptionByStrike(Put, oldShortLeg.Strike - 10, currentExpiration), &quot;ShortPut-&quot; + Position.Adjustments);
	  modelPosition.AddLeg(newShortLeg);
	  modelPosition.CommitTrade(&quot;Roll Puts Down&quot;);
	  WriteLog(&quot;New delta after rolling puts down: &quot; + Position.Delta + &quot; per contract delta: &quot; + (Position.Delta / Position.GetLegByName(&quot;ShortPut*&quot;).Qty));
	 }
	}

   //Check if Short Strike Delta&apos;s within tolerance on upside
   origShortLeg = Position.GetLegByName(&quot;ShortCall*&quot;);
   if (origShortLeg != null) {
	//Find the month expiration cycle
	var monthExpiration = GetExpiryByDTE(Position.GetLegByName(&quot;ShortPut*&quot;).DTE);
	if (monthExpiration == null) {
	 return; // Haven&apos;t found an expiration matching our criteria
	}
	if (Position.Delta &lt; (-16 * Position.GetLegByName(&quot;ShortPut*&quot;).Qty)) {
	 WriteLog(&quot;Delta less than -16 per contract - &quot; + Position.Delta);
	 WriteLog(&quot;Position.Tag=&quot; + Position.Tag);
	  WriteLog(&quot;Short strike delta &lt; -16 per contract - delta: &quot; + Position.Delta);
      var oldShortLeg=Position.GetLegByName(&quot;ShortCall*&quot;).CreateClosingModelLeg();
	  var modelPosition = NewModelPosition();
	  modelPosition.AddLeg(oldShortLeg);
	  var newShortLeg = CreateModelLeg(Sell, oldShortLeg.Qty, GetOptionByStrike(Call, oldShortLeg.Strike + 10, currentExpiration), &quot;ShortCall-&quot; + Position.Adjustments);
	  modelPosition.AddLeg(newShortLeg);
	  modelPosition.CommitTrade(&quot;Roll Calls Up&quot;);
	   WriteLog(&quot;New delta after rolling short calls up: &quot; + Position.Delta  + &quot; per contract delta: &quot; + (Position.Delta / Position.GetLegByName(&quot;ShortCall*&quot;).Qty));;
	 }
	}

   //this is an ugly workaround for some data problem on 8-2-11 and 8-3-11 that causes my adjustment/exti rules to not be applied
   //we&apos;re just closing the trade before the data problems begin 
   if (Backtest.TradingDateTime.Date.ToString() == &quot;8/1/2011 12:00:00 AM&quot;) {
	WriteLog(&quot;Closing due to rule for 8/1/2011&quot;);
	Position.Close(&quot;Failed to lookup adjustment options - WORKAROUND for 8/1/2011, just exit&quot;);
   }
  }


 }
} catch (Exception ex) {
 WriteLog(&quot;Try/Catch hit in adjustment block&quot;);
}

//------- E X I T   R U L E S -------
try {
if (Position.IsOpen == true) {
 
 if ((currentTime &gt;= startTime) &amp;&amp; (currentTime &lt;= endTime)) {
 
  double PnL = 0;
  if (Backtest.Tag != null) { PnL = (double) Backtest.Tag;}
	
  //Check Profit Target
  if (Position.PnL &gt;= 6500) {
	Position.Close(&quot;Hit Profit Target&quot;);
	Backtest.Tag = PnL + Position.PnL - Position.Commission;
	WriteLog(&quot;Backtest.Tag=&quot; + Backtest.Tag);
    WriteLog(&quot;Position.PnL=&quot; + Position.PnL);
    }

  //Check Max Loss
  if (Position.PnL &lt;= -8000) {
	Position.Close(&quot;Hit Max Loss&quot;);
	Backtest.Tag = PnL + Position.PnL - Position.Commission;
	WriteLog(&quot;Backtest.Tag=&quot; + Backtest.Tag);
    WriteLog(&quot;Position.PnL=&quot; + Position.PnL);
   	}	

  //Check Minimum DTE
  if (Position.DTE &lt;= PARAM_ExitDTE) {
	Position.Close(&quot;Hit Minimum DTE&quot;);
	Backtest.Tag = PnL + Position.PnL - Position.Commission;
	WriteLog(&quot;Backtest.Tag=&quot; + Backtest.Tag);
    WriteLog(&quot;Position.PnL=&quot; + Position.PnL);
	}	

  //Check Max Adjustments
  if (Position.Adjustments &gt;= PARAM_MaxAdjustments) {
	Position.Close(&quot;Hit Max Adjustments&quot;);
	Backtest.Tag = PnL + Position.PnL - Position.Commission;
	WriteLog(&quot;Backtest.Tag=&quot; + Backtest.Tag);
    WriteLog(&quot;Position.PnL=&quot; + Position.PnL);
	}	
 }
}
} catch (Exception ex) {
 WriteLog(&quot;Try/Catch hit in adjustment block&quot;);
}</TickEventCode>
    </StrategyCode>
</AlgoNETExplorer>
